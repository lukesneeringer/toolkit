@extends "py/common.snip"
@extends "py/method_sample.snip"

@snippet generate(xapiClass)
    <?php
    {@licenseSection(xapiClass)}

    namespace {@xapiClass.packageName};

    @join import : xapiClass.imports
        {@import}
    @end

    {@serviceDoc(xapiClass)}
    class {@xapiClass.name}
    {
        {@constants(xapiClass)}
        {@statics(xapiClass)}
        {@members(xapiClass)}
        {@staticFunctions(xapiClass)}
        {@functions(xapiClass)}
        {@constructor(xapiClass)}
        {@apiMethods(xapiClass)}
        {@cleanupSection(xapiClass)}
    }
@end

@private licenseSection(xapiClass)
   @# Copyright 2016 Google Inc. All Rights Reserved.
   @#
   @# Licensed under the Apache License, Version 2.0 (the "License"); you may not use this file except
   @# in compliance with the License. You may obtain a copy of the License at
   @#
   @# http://www.apache.org/licenses/LICENSE-2.0
   @#
   @# Unless required by applicable law or agreed to in writing, software distributed under the License
   @# is distributed on an "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express
   @# or implied. See the License for the specific language governing permissions and limitations under
   @# the License.

   @# GENERATED CODE WARNING
   @# This file was generated from the file
   @# https://github.com/google/googleapis/blob/master/{@xapiClass.protoFilename}
   @# and updates to that file get reflected here through a refresh process.
@end

@private serviceDoc(xapiClass)
    @let coreSampleCode = sampleCode(xapiClass.doc.exampleApiMethod), \
         decoratedSampleCode = decorateSampleCode(xapiClass.doc.exampleApiMethod, coreSampleCode)
        {@renderServiceDoc(xapiClass.doc, decoratedSampleCode)}
    @end
@end

@private renderServiceDoc(xapiClassDoc, exampleMethodSampleCode)
    """
    Service Description: {@xapiClassDoc.firstLine}
    @if xapiClassDoc.remainingLines
        @join commentLine : xapiClassDoc.remainingLines
            {@commentLine}
        @end
    @end

    This class provides the ability to make remote calls to the backing service through method
    calls that map to API methods. Sample code to get started:

    ```
    @join sampleLine : util.getDocLines(exampleMethodSampleCode)
        {@sampleLine}
    @end
    ```

    Many parameters require resource names to be formatted in a particular way. To assist
    with these names, this class includes a format method for each type of name, and additionally
    a parse method to extract the individual identifiers contained within names that are
    returned.
    """
@end

@private constants(xapiClass)
    @if xapiClass.hasDefaultServiceAddress
      @# The default address of the service.
      SERVICE_ADDRESS = '{@xapiClass.serviceAddress}'
    @end

    @# The default port of the service.
    DEFAULT_SERVICE_PORT = {@xapiClass.servicePort}

    @# The default timeout for non-retrying methods.
    DEFAULT_TIMEOUT_MILLIS = 30000;

    @# This code is automatically generated, and is built on and depends on our
    @# `google-gax` library, which provides common functionality in Python.
    _CODE_GEN_NAME_VERSION = 'gapic/0.1.0'
    _GAX_VERSION = pkg_resources.get_distribution('google-gax').version
@end

@private statics(xapiClass)
    @join pathTemplate : xapiClass.pathTemplates
        private static ${@pathTemplate.name};
    @end
    {@BREAK}
@end

@private members(xapiClass)
    private $grpcCredentialsHelper;
    @join stub : xapiClass.stubs
        private ${@stub.name};
    @end
    private $scopes;
    private $defaultCallSettings;
    private $descriptors;
    @if xapiClass.hasLongRunningOperations
      private $operationsClient;
    @end
    {@""}
@end

@private staticFunctions(xapiClass)
    @join function : xapiClass.formatResourceFunctions
        {@formatResourceFunction(function)}
    @end
    {@""}
    @join function : xapiClass.parseResourceFunctions
        {@parseResourceFunction(function)}
    @end
    {@""}
    @join function : xapiClass.pathTemplateGetterFunctions
        {@pathTemplateGetterFunction(function)}
    @end
    {@pageStreamingDescriptorFunction(xapiClass)}
    {@longRunningDescriptorFunction(xapiClass)}
@end

@private formatResourceFunction(function)
    @@classmethod
    def {@function.name}(cls, \
        {@formatResourceFunctionParams(function.resourceIdParams)}):
        """Formats a string containing the fully-qualified path to represent
        a {@function.entityName} resource.
        """
        return cls.{@function.pathTemplateGetterName}().render([
            {@pathTemplateArgs(function.resourceIdParams)},
        ])
    {@""}
@end

@private formatResourceFunctionParams(resourceIdParams)
    @join param : resourceIdParams on ", "
        {@param.name}
    @end
@end

@private pathTemplateArgs(resourceIdParams)
    @join param : resourceIdParams on ",".add(BREAK)
        '{@param.templateKey}': {@param.name}
    @end
@end

@private parseResourceFunction(function)
    @@classmethod
    def {@function.name}(cls, {@function.entityNameParamName}):
        """Parses the {@function.outputResourceId} from the given
        fully-qualified path which represents a {@function.entityName}
        resource.
        """
        return cls.{@function.pathTemplateGetterName}().match(
          {@function.entityNameParamName},
        )['{@function.outputResourceId}']
    }
    {@""}
@end

@private pathTemplateGetterFunction(function)
    @@classmethod
    def {@function.name}(cls):
        if cls.{@function.pathTemplateName} is None:
            cls.{@function.pathTemplateName} = path_template.PathTemplate('{@function.pattern}')
        return cls.{@function.pathTemplateName}
    {@""}
@end

@private pageStreamingDescriptorFunction(xapiClass)
    private static function getPageStreamingDescriptors()
    {
        @join descriptor : xapiClass.pageStreamingDescriptors
            ${@descriptor.varName} =
                    new PageStreamingDescriptor([
                        'requestPageTokenField' => '{@descriptor.requestTokenFieldName}',
                        @if descriptor.requestHasPageSizeField
                            'requestPageSizeField' => '{@descriptor.requestPageSizeFieldName}',
                        @end
                        'responsePageTokenField' => '{@descriptor.responseTokenFieldName}',
                        'resourceField' => '{@descriptor.resourcesFieldName}',
                    ]);
        @end

        $pageStreamingDescriptors = [
            @join descriptor : xapiClass.pageStreamingDescriptors
                '{@descriptor.methodName}' => ${@descriptor.varName},
            @end
        ];

        return $pageStreamingDescriptors;
    }
    {@""}
@end

@private longRunningDescriptorFunction(xapiClass)
    @if xapiClass.hasLongRunningOperations
      def getLongRunningDescriptors()
      {
          return [
              @join descriptor : xapiClass.longRunningDescriptors
                  '{@descriptor.methodName}' => [
                      'operationReturnType' => '{@descriptor.operationPayloadTypeName}',
                      'metadataReturnType' => '{@descriptor.metadataTypeName}',
                  ],
              @end
          ];
      }
      {@""}
    @end
@end

@private functions(xapiClass)
    @if xapiClass.hasLongRunningOperations
      def get_operations_client():
          return this._operations_client;
    @end
    {@""}
@end

@private constructor(xapiClass)
    def __init__(self,
        service_path=SERVICE_ADDRESS,
        port=DEFAULT_SERVICE_PORT,
        channel=None,
        credentials=None,
        ssl_credentials=None,
        scopes=None,
        client_config=None,
        app_name='gax',
        app_version=_GAX_VERSION):
        """Constructor.

        Args:
          service_path (string): The domain name of the API remote host.
          port (int): The port on which to connect to the remote host.
          channel (:class:`grpc.Channel`): A ``Channel`` instance through
            which to make calls.
          credentials (object): The authorization credentials to attach to
            requests. These credentials identify this application to the
            service.
          ssl_credentials (:class:`grpc.ChannelCredentials`): A
            ``ChannelCredentials`` instance for use with an SSL-enabled
            channel.
          scopes (list[string]): A list of OAuth2 scopes to attach to requests.
          client_config (dict):
            A dictionary for call options for each method. See
            :func:`google.gax.construct_settings` for the structure of
            this data. Falls back to the default config if not specified
            or the specified config is missing data points.
          app_name (string): The codename of the calling service.
          app_version (string): The version of the calling service.

        Returns:
          A `{xapiClass.name}` object.
        """
    public function __construct($options = [])
    {
        @if xapiClass.missingDefaultServiceAddress
          if (!array_key_exists('serviceAddress', $options)) {
            throw new ValidationException("The 'serviceAddress' option must be provided.");
          }
        @end
        @if xapiClass.missingDefaultServiceScopes
          if (!array_key_exists('scopes', $options)) {
            throw new ValidationException("The 'scopes' option must be provided.");
          }
        @end
        $defaultOptions = [
            @if xapiClass.hasDefaultServiceAddress
              'serviceAddress' => self::SERVICE_ADDRESS,
            @end
            'port' => self::DEFAULT_SERVICE_PORT,
            @if xapiClass.hasDefaultServiceScopes
              'scopes' => [
                  @join scope : {@xapiClass.authScopes}
                      '{@scope}',
                  @end
              ],
            @end
            'retryingOverride' => null,
            'timeoutMillis' => self::DEFAULT_TIMEOUT_MILLIS,
            'appName' => 'gax',
            'appVersion' => AgentHeaderDescriptor::getGaxVersion(),
        ];
        $options = array_merge($defaultOptions, $options);

        @if xapiClass.hasLongRunningOperations
            $this->operationsClient = new OperationsClient([
                'serviceAddress' => $options['serviceAddress'],
                'scopes' => $options['scopes'],
            ]);
        @end

        $headerDescriptor = new AgentHeaderDescriptor([
            'clientName' => $options['appName'],
            'clientVersion' => $options['appVersion'],
            'codeGenName' => self::_CODEGEN_NAME,
            'codeGenVersion' => self::_CODEGEN_VERSION,
            'gaxVersion' => AgentHeaderDescriptor::getGaxVersion(),
            'phpVersion' => phpversion(),
        ]);

        $defaultDescriptors = ['headerDescriptor' => $headerDescriptor];
        $this->descriptors = [
            @join methodKey : xapiClass.methodKeys
                '{@methodKey}' => $defaultDescriptors,
            @end
        ];
        $pageStreamingDescriptors = self::getPageStreamingDescriptors();
        foreach ($pageStreamingDescriptors as $method => $pageStreamingDescriptor) {
            $this->descriptors[$method]['pageStreamingDescriptor'] = $pageStreamingDescriptor;
        }
        @if xapiClass.hasLongRunningOperations
          $longRunningDescriptors = self::getLongRunningDescriptors();
          foreach ($longRunningDescriptors as $method => $longRunningDescriptor) {
              $this->descriptors[$method]['longRunningDescriptor'] = $longRunningDescriptor + ['operationsClient' => $this->operationsClient];
          }
        @end

        $clientConfigJsonString = file_get_contents(__DIR__ . '/{@xapiClass.clientConfigPath}');
        $clientConfig = json_decode($clientConfigJsonString, true);
        $this->defaultCallSettings =
                CallSettings::load('{@xapiClass.interfaceKey}',
                                   $clientConfig,
                                   $options['retryingOverride'],
                                   GrpcConstants::getStatusCodeNames(),
                                   $options['timeoutMillis']);

        $this->scopes = $options['scopes'];

        $createStubOptions = [];
        if (array_key_exists('sslCreds', $options)) {
            $createStubOptions['sslCreds'] = $options['sslCreds'];
        }
        $grpcCredentialsHelperOptions = array_diff_key($options, $defaultOptions);
        $this->grpcCredentialsHelper = new GrpcCredentialsHelper($this->scopes, $grpcCredentialsHelperOptions);

        @join stub : xapiClass.stubs
            ${@stub.createStubFunctionName} = function ($hostname, $opts) {
                return new {@stub.grpcClientTypeName}($hostname, $opts);
            };
            if (array_key_exists('{@stub.createStubFunctionName}', $options)) {
                ${@stub.createStubFunctionName} = $options['{@stub.createStubFunctionName}'];
            }
            $this->{@stub.name} = $this->grpcCredentialsHelper->createStub(
                ${@stub.createStubFunctionName},
                $options['serviceAddress'],
                $options['port'],
                $createStubOptions);
        @end
    }
    {@""}
@end

@private apiMethods(xapiClass)
    @join apiMethod : xapiClass.apiMethods
        @let coreSampleCode = sampleCode(apiMethod)
            {@methodDoc(apiMethod.doc, decorateSampleCode(apiMethod, coreSampleCode))}
        @end
        public function {@apiMethod.name}({@paramList(apiMethod.methodParams)})
        {
            $request = new {@apiMethod.requestTypeName}();
            @join param : apiMethod.requiredRequestObjectParams
                {@setRequiredFieldCall(param)}
            @end
            @join param : apiMethod.optionalRequestObjectParams
                {@setOptionalFieldCall(param)}
            @end

            $mergedSettings = $this->defaultCallSettings['{@apiMethod.key}']->merge(
                new CallSettings($optionalArgs));
            $callable = ApiCallable::createApiCall(
                $this->{@apiMethod.stubName}, '{@apiMethod.grpcMethodName}', $mergedSettings, $this->descriptors['{@apiMethod.key}']);

            return $callable(
                $request,
                [],
                ['call_credentials_callback' => $this->createCredentialsCallback()]);
        }
        {@""}
    @end
@end

@private paramList(params)
    @join param : params on ", "
        @if param.defaultValue
            {@param.name}={@param.defaultValue}
        @else
            {@param.name}
        @end
    @end
@end

@private setRequiredFieldCall(param)
    @if param.isMap
        foreach (${@param.name} as $key => $value) {
            $request->{@param.setCallName}((new {@param.elementTypeName}())->setKey($key)->setValue($value));
        }
    @else
        @if param.isArray
            foreach (${@param.name} as $elem) {
                $request->{@param.setCallName}($elem);
            }
        @else
            $request->{@param.setCallName}(${@param.name});
        @end
    @end
@end

@private setOptionalFieldCall(param)
    if (isset($optionalArgs['{@param.name}'])) {
        @if param.isMap
            foreach ($optionalArgs['{@param.name}'] as $key => $value) {
                $request->{@param.setCallName}((new {@param.elementTypeName}())->setKey($key)->setValue($value));
            }
        @else
            @if param.isArray
                foreach ($optionalArgs['{@param.name}'] as $elem) {
                    $request->{@param.setCallName}($elem);
                }
            @else
                $request->{@param.setCallName}($optionalArgs['{@param.name}']);
            @end
        @end
    }
@end

@private methodDoc(apiMethodDoc, methodSampleCode)
    /**
    @join commentLine : apiMethodDoc.mainDocLines
        {@""} * {@commentLine}
    @end
     *
     * Sample code:
     * ```
    @join sampleLine : util.getDocLines(methodSampleCode)
        {@""} * {@sampleLine}
    @end
     * ```
    @if apiMethodDoc.paramDocs
        {@""} *
        @join doc : apiMethodDoc.paramDocs
            {@paramDoc(doc)}
        @end
    @end
    @if apiMethodDoc.returnTypeName
        {@""} *
         * @@return {@apiMethodDoc.returnTypeName}
    @end
     *
     * @@throws \Google\GAX\ApiException if the remote call fails
     */
    {@""}
@end

@private paramDoc(doc)
    @switch doc.type
    @case "SimpleParamDocView"
        {@simpleParamDoc(doc)}
    @case "MapParamDocView"
        {@mapParamDoc(doc)}
    @default
        $unhandledCase: {@doc.type}$
    @end
@end

@private simpleParamDoc(doc)
    {@""} * @@param {@doc.typeName} ${@doc.paramName} {@doc.firstLine}
    @if doc.remainingLines
        @join commentLine : doc.remainingLines
            {@""} * {@commentLine}
        @end
    @end
@end

@private mapParamDoc(doc)
    {@""} * @@param {@doc.typeName} ${@doc.paramName} {
     *     {@doc.firstLine}
    @if doc.remainingLines
        @join commentLine : doc.remainingLines
            {@""} *     {@commentLine}
        @end
    @end
    @if doc.arrayKeyDocs
        @join simpleParamDoc : doc.arrayKeyDocs
            {@""} *     @@type {@simpleParamDoc.typeName} ${@simpleParamDoc.paramName}
            @if simpleParamDoc.firstLine
                {@""} *          {@simpleParamDoc.firstLine}
            @end
            @if simpleParamDoc.remainingLines
                @join commentLine : simpleParamDoc.remainingLines
                    {@""} *          {@commentLine}
                @end
            @end
        @end
    @end
     * }
@end

@private cleanupSection(xapiClass)
    /**
     * Initiates an orderly shutdown in which preexisting calls continue but new
     * calls are immediately cancelled.
     */
    public function close()
    {
        @join stub : xapiClass.stubs
            $this->{@stub.name}->close();
        @end
    }

    private function createCredentialsCallback()
    {
        return $this->grpcCredentialsHelper->createCallCredentialsCallback();
    }
@end
